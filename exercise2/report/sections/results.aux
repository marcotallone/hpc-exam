\relax 
\providecommand\hyper@newdestlabel[2]{}
\providecommand\HyperFirstAtBeginDocument{\AtBeginDocument}
\HyperFirstAtBeginDocument{\ifx\hyper@anchor\@undefined
\global\let\oldcontentsline\contentsline
\gdef\contentsline#1#2#3#4{\oldcontentsline{#1}{#2}{#3}}
\global\let\oldnewlabel\newlabel
\gdef\newlabel#1#2{\newlabelxx{#1}#2}
\gdef\newlabelxx#1#2#3#4#5#6{\oldnewlabel{#1}{{#2}{#3}}}
\AtEndDocument{\ifx\hyper@anchor\@undefined
\let\contentsline\oldcontentsline
\let\newlabel\oldnewlabel
\fi}
\fi}
\global\let\hyper@last\relax 
\gdef\HyperFirstAtBeginDocument#1{#1}
\providecommand\HyField@AuxAddToFields[1]{}
\providecommand\HyField@AuxAddToCoFields[2]{}
\citation{epyc}
\providecommand \oddpage@label [2]{}
\@writefile{lof}{\contentsline {figure}{\numberline {1}{\ignorespaces Strong scalability of the MPI implementations. On the left, the average sorting time against the number of processes for $100$ million elements. On the right, the speedup against the number of processes. All results have been obtained with $2$ threads per core.\relax }}{1}{figure.caption.1}\protected@file@percent }
\providecommand*\caption@xref[2]{\@setref\relax\@undefined{#1}}
\newlabel{fig:strong_mpi}{{1}{1}{Strong scalability of the MPI implementations. On the left, the average sorting time against the number of processes for $100$ million elements. On the right, the speedup against the number of processes. All results have been obtained with $2$ threads per core.\relax }{figure.caption.1}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {2}{\ignorespaces Weak scalability of the MPI implementations. On the left, the average time against the number of processes for $1$ million elements per process. On the right, the efficiency vs.\ the number of processes. All results have been obtained with $2$ threads per core.\relax }}{2}{figure.caption.2}\protected@file@percent }
\newlabel{fig:weak_mpi}{{2}{2}{Weak scalability of the MPI implementations. On the left, the average time against the number of processes for $1$ million elements per process. On the right, the efficiency vs.\ the number of processes. All results have been obtained with $2$ threads per core.\relax }{figure.caption.2}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {3}{\ignorespaces Strong scalability of the OpenMP implementations. On the left, the average sorting time against the number of threads for $10$ million elements. On the right, the speedup vs.\ the number of threads.\relax }}{3}{figure.caption.3}\protected@file@percent }
\newlabel{fig:strong_omp}{{3}{3}{Strong scalability of the OpenMP implementations. On the left, the average sorting time against the number of threads for $10$ million elements. On the right, the speedup vs.\ the number of threads.\relax }{figure.caption.3}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {4}{\ignorespaces Weak scalability of the OpenMP implementations. On the left, the average sorting time against the number of threads for $1$ million elements per thread. On the right, the efficiency vs.\ the number of threads.\relax }}{3}{figure.caption.4}\protected@file@percent }
\newlabel{fig:weak_omp}{{4}{3}{Weak scalability of the OpenMP implementations. On the left, the average sorting time against the number of threads for $1$ million elements per thread. On the right, the efficiency vs.\ the number of threads.\relax }{figure.caption.4}{}}
\gdef \@abspage@last{3}
